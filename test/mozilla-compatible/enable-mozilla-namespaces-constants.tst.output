

enable-mozilla-namespaces-constants

const webidl2 = require("../dist/webidl2.js");




/*test string*/
var s =`namespace APZHitResultFlags {
  const unsigned short INVISIBLE = 0;
};`


console.log(s)

var tree = webidl2.parse(s,{enableMozillaNamespacesConstants:true});
var d = JSON.parse(JSON.stringify(tree))
d[0]
d[0].members
var txt = webidl2.write(tree);
console.log(txt)


/*

> var s =`namespace APZHitResultFlags {
...   const unsigned short INVISIBLE = 0;
... };`
undefined
>
>
> console.log(s)
namespace APZHitResultFlags {
  const unsigned short INVISIBLE = 0;
};
undefined
>
> var tree = webidl2.parse(s,{enableMozillaNamespacesConstants:true});
undefined
> var d = JSON.parse(JSON.stringify(tree))
undefined
> d[0]
{ type: 'namespace',
  name: 'APZHitResultFlags',
  inheritance: null,
  members:
   [ { type: 'const',
       name: 'INVISIBLE',
       idlType: [Object],
       extAttrs: [],
       value: [Object] } ],
  extAttrs: [],
  partial: false }
> d[0].members
[ { type: 'const',
    name: 'INVISIBLE',
    idlType:
     { type: 'const-type',
       extAttrs: [],
       generic: '',
       nullable: false,
       union: false,
       idlType: 'unsigned short' },
    extAttrs: [],
    value: { type: 'number', value: '0' } } ]
> var txt = webidl2.write(tree);
undefined
> console.log(txt)
namespace APZHitResultFlags {
  const unsigned short INVISIBLE = 0;
};
undefined
>







*/






/*test from a real file*/

function rfile(fn) {
    let buf = fs.readFileSync(fn)
    let s = buf.toString()
    return(s)
}

var s  = rfile("APZTestData.webidl")
var tree = webidl2.parse(s,{enableMozillaNamespacesConstants:true});
var d = JSON.parse(JSON.stringify(tree))
d

var txt = webidl2.write(tree);
console.log(txt)

/**/


> var tree = webidl2.parse(s,{enableMozillaNamespacesConstants:true});
undefined
> var d = JSON.parse(JSON.stringify(tree))
undefined
> d
[ { type: 'dictionary',
    name: 'ScrollFrameDataEntry',
    inheritance: null,
    members: [ [Object], [Object] ],
    extAttrs: [],
    partial: false },
  { type: 'dictionary',
    name: 'ScrollFrameData',
    inheritance: null,
    members: [ [Object], [Object] ],
    extAttrs: [],
    partial: false },
  { type: 'dictionary',
    name: 'APZBucket',
    inheritance: null,
    members: [ [Object], [Object] ],
    extAttrs: [],
    partial: false },
  { type: 'namespace',
    name: 'APZHitResultFlags',
    inheritance: null,
    members:
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    extAttrs: [ [Object] ],
    partial: false },
  { type: 'dictionary',
    name: 'APZHitResult',
    inheritance: null,
    members: [ [Object], [Object], [Object], [Object], [Object] ],
    extAttrs: [],
    partial: false },
  { type: 'dictionary',
    name: 'AdditionalDataEntry',
    inheritance: null,
    members: [ [Object], [Object] ],
    extAttrs: [],
    partial: false },
  { type: 'dictionary',
    name: 'APZTestData',
    inheritance: null,
    members: [ [Object], [Object], [Object], [Object] ],
    extAttrs: [],
    partial: false },
  { type: 'dictionary',
    name: 'FrameUniformity',
    inheritance: null,
    members: [ [Object], [Object] ],
    extAttrs: [],
    partial: false },
  { type: 'dictionary',
    name: 'FrameUniformityResults',
    inheritance: null,
    members: [ [Object] ],
    extAttrs: [],
    partial: false } ]
>
> var txt = webidl2.write(tree);
undefined
> console.log(txt)
/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This Source Code Form is subject to the terms of the Mozilla Public

 * License, v. 2.0. If a copy of the MPL was not distributed with this file,

 * You can obtain one at http://mozilla.org/MPL/2.0/.

 */



/*

 * This file declares data structures used to communicate data logged by

 * various components for the purpose of APZ testing (see bug 961289 and

 * gfx/layers/apz/test/APZTestData.h) to JS test code.

 */



// A single key-value pair in the data.

dictionary ScrollFrameDataEntry {

  DOMString key;

  DOMString value;

};



// All the key-value pairs associated with a given scrollable frame.

// The scrollable frame is identified by a scroll id.

dictionary ScrollFrameData {

  unsigned long long scrollId;

  sequence<ScrollFrameDataEntry> entries;

};



// All the scrollable frames associated with a given paint or repaint request.

// The paint or repaint request is identified by a sequence number.

dictionary APZBucket {

  unsigned long sequenceNumber;

  sequence<ScrollFrameData> scrollFrames;

};



[Pref="apz.test.logging_enabled"]

namespace APZHitResultFlags {

  // These constants should be kept in sync with mozilla::gfx::CompositorHitTestInfo

  const unsigned short INVISIBLE = 0;

  const unsigned short VISIBLE = 0x0001;

  const unsigned short IRREGULAR_AREA = 0x0002;

  const unsigned short APZ_AWARE_LISTENERS = 0x0004;

  const unsigned short INACTIVE_SCROLLFRAME = 0x0008;

  const unsigned short PAN_X_DISABLED = 0x0010;

  const unsigned short PAN_Y_DISABLED = 0x0020;

  const unsigned short PINCH_ZOOM_DISABLED = 0x0040;

  const unsigned short DOUBLE_TAP_ZOOM_DISABLED = 0x0080;

  const unsigned short SCROLLBAR = 0x0100;

  const unsigned short SCROLLBAR_THUMB = 0x0200;

  const unsigned short SCROLLBAR_VERTICAL = 0x0400;

  const unsigned short REQUIRES_TARGET_CONFIRMATION = 0x0800;

};



dictionary APZHitResult {

  float screenX;

  float screenY;

  unsigned short hitResult; // combination of the APZHitResultFlags.* flags

  unsigned long long layersId;

  unsigned long long scrollId;

};



dictionary AdditionalDataEntry {

  DOMString key;

  DOMString value;

};



// All the paints and repaint requests. This is the top-level data structure.

dictionary APZTestData {

  sequence<APZBucket> paints;

  sequence<APZBucket> repaintRequests;

  sequence<APZHitResult> hitResults;

  sequence<AdditionalDataEntry> additionalData;

};



// A frame uniformity measurement for every scrollable layer

dictionary FrameUniformity {

  unsigned long layerAddress;

  float frameUniformity;

};



dictionary FrameUniformityResults {

  sequence<FrameUniformity> layerUniformities;

};
undefined
>
/**/
